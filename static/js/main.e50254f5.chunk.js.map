{"version":3,"sources":["redux/constants.js","redux/reducers/playwindow.js","redux/sagas/timerSaga.js","redux/store.js","components/Button/Button.jsx","components/WelcomePage/WelcomePage.jsx","components/PlayCard/PlayCard.jsx","components/Header/Header.jsx","components/PlayWindow/PlayWindow.jsx","components/WinWindow/WinWindow.jsx","Router/Router.jsx","App.js","reportWebVitals.js","index.js"],"names":["ACTIONS","defaultState","cardSet","smallCounter","bigCounter","timeCounter","movesCounter","isWin","getRand","Math","floor","random","timerSagaWorker","timerSaga","takeEveryWithRace","select","store","playWindowReducer","delay","put","type","action","saga","cancel","takeEvery","args","race","task","call","take","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","sagaMiddleWare","createSagaMiddleWare","createStore","combineReducers","state","newSet","cardsArr","i","j","map","card","gameId","cardId","active","opened","newCounter","newCount","newTimer","isAllOpened","every","applyMiddleware","run","Button","onclick","classname","text","onClick","className","WelcomePage","to","PlayCard","cardIsActive","cardIsOpened","backgroundImage","style","Header","dispatch","useDispatch","useSelector","moveCounter","PlayWindow","smallCount","redirect","useHistory","useEffect","setTimeout","push","console","log","picAddress","cardActive","WinWindow","GameRouter","exact","path","component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e50254f5.chunk.js","sourcesContent":["export const ACTIONS = {\n    CREATE_CARDSET:'CREATE_CARDSET',\n    SHUFFLE_CARDS:'SHUFFLE_CARDS',\n    ACTIVATE_CARD: 'ACTIVATE_CARD',\n    DEACTIVATE_CARDS:'DEACTIVATE_CARDS',\n\n    UP_SMALL_COUNTER:'UP_SMALL_COUNTER',\n    ZERO_SMALL_COUNTER:'ZERO_SMALL_COUNTER',\n    SET_BIG_COUNTER:'SET_BIG_COUNTER',\n    OPEN_CARDS: 'OPEN_CARDS',\n    CLOSE_CARDS:'CLOSE_CARDS',\n\n    UP_TIMER:'UP_TIMER',\n    START_TIMER:'START_TIMER',\n    STOP_TIMER:'STOP_TIMER',\n    UP_MOVE_COUNTER: 'UP_MOVE_COUNTER',\n\n    TEST_ALL_OPENED:'TEST_ALL_OPENED',\n    CHECK_IF_WIN:'CHECK_IF_WIN',\n    RESET_ALL:'RESET_ALL',\n    RESET_COUNTERS:'RESET_COUNTERS'\n}","import {ACTIONS} from \"../constants\";\nimport cardsArr from \"../../cards.json\";\n\nconst defaultState = {\n    cardSet: [],\n    smallCounter: 0,\n    bigCounter: 0,\n    timeCounter: 0,\n    movesCounter: 0,\n    isWin: false\n}\nconst getRand = () => {\n    return (Math.floor((Math.random() * 24)))\n}\n\nexport function playWindowReducer(state = defaultState, action) {\n    switch (action.type) {\n\n        case ACTIONS.CREATE_CARDSET: {\n            let newSet = cardsArr\n            return {...state, cardSet: newSet}\n        }\n        case ACTIONS.SHUFFLE_CARDS: {\n            let newSet = state.cardSet\n            for (let i = 0; i < 24; i++) {\n                let j = getRand();\n                [newSet[i], newSet[j]] = [newSet[j], newSet[i]]\n            }\n            return {...state, cardSet: newSet}\n        }\n        case ACTIONS.ACTIVATE_CARD: {\n            let newSet = state.cardSet.map(card => card.gameId === action.cardId ? {\n                ...card,\n                active: action.active = true\n            } : card)\n            return {...state, cardSet: newSet}\n        }\n\n        case ACTIONS.DEACTIVATE_CARDS: {\n            let newSet = state.cardSet.map(card => !card.opened ? {...card, active: action.active = false} : card)\n            return {...state, cardSet: newSet}\n        }\n\n        case ACTIONS.OPEN_CARDS: {\n            let newCounter = state.bigCounter\n            let newSet = state.cardSet\n            if (newCounter === -action.cardId) {\n                newSet = state.cardSet.map(card => card.gameId === newCounter || card.gameId === -newCounter\n                    ? {...card, opened: action.opened = true} : card)\n            }\n            return {...state, cardSet: newSet}\n        }\n\n        case ACTIONS.TEST_ALL_OPENED: {\n            let newSet = state.cardSet.map(card => card ? {...card, opened: card.opened = true} : card)\n            return {...state, cardSet: newSet}\n        }\n        case ACTIONS.UP_SMALL_COUNTER: {\n            let newCount = state.smallCounter + 1\n            return {...state, smallCounter: newCount}\n        }\n\n        case ACTIONS.ZERO_SMALL_COUNTER: {\n            return {...state, smallCounter: 0}\n        }\n\n        case ACTIONS.SET_BIG_COUNTER: {\n            let newCount = action.cardId\n            return {...state, bigCounter: newCount}\n        }\n        case ACTIONS.UP_TIMER: {\n            let newTimer = state.timeCounter +1\n            return {...state, timeCounter: newTimer}\n        }\n\n        case ACTIONS.UP_MOVE_COUNTER: {\n            let newCount = state.movesCounter +1\n            return {...state, movesCounter: newCount}\n        }\n\n        case ACTIONS.CHECK_IF_WIN: {\n            let isAllOpened = state.cardSet.every((card) => card.opened);\n            return {...state, isWin: isAllOpened}\n        }\n\n        case ACTIONS.RESET_ALL: {\n            return defaultState\n        }\n        default:\n            return state\n    }\n}\n","import {ACTIONS} from \"../constants\";\nimport {put, takeEvery, delay, select, take, call, race} from 'redux-saga/effects'\n\nexport function* timerSagaWorker() {\n    const isWin = yield select((store) => store.playWindowReducer.isWin);\n\n    while (!isWin) {\n        yield delay(1000);\n        yield put({type: ACTIONS.UP_TIMER});\n    }\n}\n\nexport function* timerSaga() {\n    yield* takeEveryWithRace(ACTIONS.START_TIMER, timerSagaWorker, ACTIONS.STOP_TIMER);\n}\n\nexport function* takeEveryWithRace(action, saga, cancel) {\n    yield takeEvery(action, function* (...args) {\n        yield race({ task: call(saga, ...args), cancel: take(cancel) });\n    });\n}","import {combineReducers, createStore, compose, applyMiddleware} from 'redux'\nimport {playWindowReducer} from './reducers'\nimport  createSagaMiddleWare from 'redux-saga'\nimport {timerSaga} from \"./sagas\";\nconst composeEnhancers =\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ||\n    compose;\nconst sagaMiddleWare = createSagaMiddleWare()\n\nexport const store = createStore(\n    combineReducers({\n        playWindowReducer\n    }),\n    composeEnhancers(\n        applyMiddleware(sagaMiddleWare)\n    )\n);\n\nsagaMiddleWare.run(timerSaga)","import './button.css'\n\nexport const Button = ({onclick, classname, text}) => {\n\n    return (\n        <button onClick={onclick} className={classname}> {text}</button>\n    )\n}","import {Link} from \"react-router-dom\";\nimport {Button} from \"../Button\";\nimport React from \"react\";\nimport './welcomepage.css'\n\n\nexport const WelcomePage = () => {\n\n    return (\n        <div className='welcomepage'>\n            <h2>Hello, my friend!</h2>\n            <p>Here is the game to check your memory</p>\n            <p>Open cards and find the pairs</p>\n            <p>You win, when all of them are opened</p>\n            <h3>Do your best!</h3>\n        <Link to=\"/tms-diploma/game\">\n            <Button text='New Game' classname='button'/>\n        </Link>\n        </div>\n    )\n}","import './playCard.css'\n\nexport const PlayCard = ({gameId, onclick, cardIsActive = false, cardIsOpened = false, backgroundImage}) => {\n    const backImage = 'gallery/rik.png'\n    return (\n        <div className={'playCard'}\n             onClick={onclick}\n             style={{backgroundImage: `url(${cardIsActive || cardIsOpened ? backgroundImage : backImage})`}}>\n            {/*{gameId}*/}\n        </div>\n    )\n}","import './header.css'\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {ACTIONS} from \"../../redux/constants\";\nimport {Button} from \"../Button\";\nimport {Link} from \"react-router-dom\";\n\nexport const Header = () => {\n    const dispatch = useDispatch()\n    const timeCounter = useSelector((store) => store.playWindowReducer.timeCounter);\n    const moveCounter = useSelector((store) => store.playWindowReducer.movesCounter);\n\n\n    return <div className='header'>\n        <div className='counters'>\n            <div>Time: {timeCounter}</div>\n            <div>Moves: {moveCounter}</div>\n        </div>\n        <div className='buttons'>\n            <Button classname='button' onclick={() => {\n                dispatch({type: ACTIONS.STOP_TIMER})\n                dispatch({type: ACTIONS.RESET_ALL})\n                dispatch({type: ACTIONS.CREATE_CARDSET})\n                dispatch({type: ACTIONS.SHUFFLE_CARDS})\n                dispatch({type: ACTIONS.START_TIMER})\n            }} text='Restart'/>\n            <Link to='/tms-diploma/'>\n            <Button classname='button' onclick={() => {\n                dispatch({type: ACTIONS.STOP_TIMER})\n                dispatch({type: ACTIONS.RESET_ALL})\n            }} text='To first page'/>\n            </Link>\n        </div>\n    </div>\n}","import './playWindow.css'\nimport {PlayCard} from \"../PlayCard\";\nimport {useEffect} from \"react\";\nimport {useDispatch, useSelector} from 'react-redux'\nimport {ACTIONS} from \"../../redux/constants\";\nimport {Header} from \"../Header\";\nimport {useHistory} from \"react-router-dom\"\nimport {Button} from \"../Button\";\n\n\nexport const PlayWindow = () => {\n\n    const cardSet = useSelector((store) => store.playWindowReducer.cardSet)\n    const smallCount = useSelector((store) => store.playWindowReducer.smallCounter)\n    const isWin = useSelector((store) => store.playWindowReducer.isWin)\n\n    const dispatch = useDispatch()\n    const redirect = useHistory()\n\n    useEffect(()=>{\n        dispatch({type: ACTIONS.STOP_TIMER})\n        dispatch({type: ACTIONS.RESET_ALL})\n        dispatch({type: ACTIONS.CREATE_CARDSET})\n        dispatch({type: ACTIONS.SHUFFLE_CARDS})\n        dispatch({type: ACTIONS.START_TIMER})\n    },[])\n\n    useEffect(() => {\n        if (smallCount === 2) {\n            setTimeout(() => {\n                dispatch({type: ACTIONS.ZERO_SMALL_COUNTER})\n                dispatch({type: ACTIONS.DEACTIVATE_CARDS})\n                dispatch({type: ACTIONS.CHECK_IF_WIN})\n            }, 700)\n        }\n    }, [smallCount, cardSet])\n\n    useEffect(()=>{\n        if(isWin) {\n            dispatch({type:ACTIONS.STOP_TIMER})\n            redirect.push('/tms-diploma/win')\n            console.log(isWin)}\n    },[isWin])\n\n    const onClickCard = (cardId, cardActive, cardOpened) => {\n        if (!cardOpened && !cardActive && smallCount < 2) {\n            dispatch({type: ACTIONS.ACTIVATE_CARD, cardId})\n            dispatch({type: ACTIONS.UP_SMALL_COUNTER})\n            if (smallCount === 0) {\n                dispatch({type: ACTIONS.SET_BIG_COUNTER, cardId})\n            }\n            if (smallCount === 1) {\n                dispatch({type: ACTIONS.OPEN_CARDS, cardId})\n                dispatch({type: ACTIONS.UP_MOVE_COUNTER})\n\n\n            }\n        }\n    }\n\n    return (\n        <div className='playWindow'>\n            <Header/>\n            <div className='cardsPane'>\n                {cardSet.map((card) => {\n                    return (\n                        <PlayCard\n                            key={card.gameId}\n                            gameId={card.gameId}\n                            backgroundImage={card.picAddress}\n                            cardIsActive={card.active}\n                            cardIsOpened={card.opened}\n                            onclick={() => {\n                                onClickCard(card.gameId, card.active, card.opened)\n                            }}/>\n                    )\n                })\n                }\n            </div>\n        </div>\n    )\n}","import './winwindow.css'\nimport {Button} from \"../Button\";\nimport {Link} from \"react-router-dom\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {ACTIONS} from \"../../redux/constants\";\nimport React from \"react\";\n\nexport const WinWindow = () => {\n\n    const dispatch = useDispatch()\n    const movesCounter = useSelector((store) => store.playWindowReducer.movesCounter)\n    const timeCounter = useSelector((store) => store.playWindowReducer.timeCounter)\n\n    const onclick = () => {\n\n        dispatch({type: ACTIONS.RESET_ALL})\n        dispatch({type: ACTIONS.CREATE_CARDSET})\n        dispatch({type: ACTIONS.SHUFFLE_CARDS})\n        dispatch({type: ACTIONS.START_TIMER})\n    }\n\n    return (\n        <div>\n            <div className='welcomepage'>\n                <h2>Congrats!</h2>\n                <p>Time: {timeCounter}</p>\n                <p>Moves: {movesCounter}</p>\n                <h3>Win! Win! Win!</h3>\n                <div className='buttons'>\n                <Link to=\"/tms-diploma/game\">\n                    <Button className='button' onclick={onclick} text='Play Again' classname='button'/>\n                </Link>\n                <Link to='/tms-diploma/'>\n                    <Button classname='button' text='To first page'/>\n                </Link>\n                </div>\n            </div>\n        </div>\n    )\n}","import './router.css'\nimport React from \"react\";\nimport {WelcomePage} from \"../components/WelcomePage\";\nimport {\n    BrowserRouter as Router,\n    Route,\n} from \"react-router-dom\";\n\nimport {PlayWindow} from \"../components/PlayWindow\";\nimport {WinWindow} from \"../components/WinWindow\";\n\n\nexport default function GameRouter() {\n\n    return (\n        <div className='mainWindow'>\n            <Router>\n                <Route exact path=\"/tms-diploma\" component={WelcomePage}/>\n                <Route path=\"/tms-diploma/game\" component={PlayWindow}/>\n                <Route path=\"/tms-diploma/win\" component={WinWindow}/>\n            </Router>\n        </div>\n    )\n}\n\n\n","import './App.css';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./redux\"\nimport GameRouter from \"./Router/Router\";\n\n\nfunction App() {\n    return (\n        <Provider store={store}>\n            <div className=\"App\">\n                <GameRouter/>\n            </div>\n        </Provider>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './index.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}